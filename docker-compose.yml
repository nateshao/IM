version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: im_mysql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: im_db
      MYSQL_USER: im_user
      MYSQL_PASSWORD: im_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - im_network

  # Redis缓存
  redis:
    image: redis:7.0-alpine
    container_name: im_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - im_network

  # Kafka消息队列
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: im_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - im_network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: im_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - im_network

  # Kafka UI管理界面
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: im_kafka_ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - im_network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: im_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - im_network

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: im_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployments/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - im_network

  # IM服务器
  im-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: im_server
    ports:
      - "8080:8080"
    environment:
      - CONFIG_FILE=/app/config.yaml
    volumes:
      - ./config.yaml:/app/config.yaml
    depends_on:
      - mysql
      - redis
      - kafka
    networks:
      - im_network
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:
  kafka_data:
  prometheus_data:
  grafana_data:

networks:
  im_network:
    driver: bridge 